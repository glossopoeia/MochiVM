// This defines the bytecode instructions used by the VM. It does so by invoking
// an OPCODE() macro which is expected to be defined at the point that this is
// included. (See: http://en.wikipedia.org/wiki/X_Macro for more.)
//
// Note that the order of instructions here affects the order of the dispatch
// table in the VM's interpreter loop. That in turn affects caching which
// affects overall performance. Take care to run benchmarks if you change the
// order here.

OPCODE(NOP)
OPCODE(ABORT)

OPCODE(TRUE)
OPCODE(FALSE)
OPCODE(NOT)
OPCODE(BOOL_AND)
OPCODE(BOOL_OR)
OPCODE(BOOL_NEQ)
OPCODE(BOOL_EQ)

OPCODE(CONSTANT)

OPCODE(NEGATE)
OPCODE(ADD)
OPCODE(SUBTRACT)
OPCODE(MULTIPLY)
OPCODE(DIVIDE)
OPCODE(EQUAL)
OPCODE(GREATER)
OPCODE(LESS)

OPCODE(CONCAT)

OPCODE(STORE)
OPCODE(FIND)
OPCODE(OVERWRITE)
OPCODE(FORGET)

OPCODE(CALL_FOREIGN)

OPCODE(OFFSET)
OPCODE(CALL)
OPCODE(TAILCALL)
OPCODE(CALL_CLOSURE)
OPCODE(TAILCALL_CLOSURE)
OPCODE(RETURN)

OPCODE(CLOSURE)
OPCODE(RECURSIVE)
OPCODE(MUTUAL)
OPCODE(CLOSURE_ONCE)
OPCODE(CLOSURE_ONCE_TAIL)
OPCODE(CLOSURE_MANY)

OPCODE(HANDLE)
OPCODE(INJECT)
OPCODE(EJECT)
OPCODE(COMPLETE)
OPCODE(ESCAPE)
OPCODE(CALL_CONTINUATION)
OPCODE(TAILCALL_CONTINUATION)

OPCODE(ZAP)
OPCODE(SWAP)

OPCODE(LIST_NIL)
OPCODE(LIST_CONS)
OPCODE(LIST_HEAD)
OPCODE(LIST_TAIL)
OPCODE(LIST_IS_EMPTY)
OPCODE(LIST_APPEND)

OPCODE(ARRAY_NIL)
OPCODE(ARRAY_FILL)
OPCODE(ARRAY_SNOC)
OPCODE(ARRAY_GET_AT)
OPCODE(ARRAY_SET_AT)
OPCODE(ARRAY_LENGTH)
OPCODE(ARRAY_COPY)

OPCODE(ARRAY_SLICE)
OPCODE(SUBSLICE)
OPCODE(SLICE_GET_AT)
OPCODE(SLICE_SET_AT)
OPCODE(SLICE_LENGTH)
OPCODE(SLICE_COPY)